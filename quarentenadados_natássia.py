# -*- coding: utf-8 -*-
"""QuarentenaDados_Natássia.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DS6k93bRymJed1B_T05XDp6qbD_yDet9
"""

import pandas as pd
filmes = pd.read_csv("https://raw.githubusercontent.com/alura-cursos/introducao-a-data-science/master/aula0/ml-latest-small/movies.csv")
filmes.columns =['filmeId', 'titulos','generos']
filmes.head()

avaliacoes = pd.read_csv("https://github.com/alura-cursos/introducao-a-data-science/blob/master/aula0/ml-latest-small/ratings.csv?raw=true")
avaliacoes.head()

avaliacoes.shape

len(avaliacoes)

avaliacoes.columns = ["usuarioId","filmeId","nota", "momento"]
avaliacoes.head()

avaliacoes_do_filme1 = avaliacoes.query("filmeId==1")
avaliacoes_do_filme1.head()

avaliacoes_do_filme1.describe()

avaliacoes_do_filme1.mean()

avaliacoes_do_filme1.describe()

avaliacoes["nota"]

avaliacoes["nota"].mean()

avaliacoes_do_filme1["nota"].mean()

notas_medias_por_filme = avaliacoes.groupby("filmeId")["nota"].mean()
notas_medias_por_filme.head()

filmes

notas_medias_por_filme

filmes_com_media = filmes.join(notas_medias_por_filme, on="filmeId")
filmes_com_media.head()

filmes_com_media.sort_values("nota", ascending=False).head(15)

avaliacoes.query("filmeId == 1")["nota"].plot()

avaliacoes.query("filmeId == 1")["nota"].plot(kind='hist', title="Avaliações do filme Toy Story")

import matplotlib.pyplot as plt
avaliacoes.query("filmeId == 1")["nota"].plot(kind='hist')
plt.title = ("Avaliações do filme Toy Story")
plt.show()

avaliacoes.query("filmeId == 2")["nota"].plot(kind='hist',
                                      title="Avaliações do filme Toy Jumanji")

avaliacoes.query("filmeId == 3")["nota"].plot(kind='hist',
                                              title= "Avaliações do filme Justice League: Doom")

filmes.head()

filmes["generos"].str.get_dummies('|')

"""Metodo que separa as strings da serie"""

filmes["generos"].str.get_dummies('|').sum()

filmes["generos"].str.get_dummies('|').sum().sort_values(ascending=False)

filmes["generos"].str.get_dummies('|').sum().sort_values(ascending=False).plot()

filmes["generos"].str.get_dummies('|').sum().sort_values(ascending=False).plot(
    kind='pie',
    title= "Categorias de filmes e suas presenças relativas",
    figsize=(8,8))
plt.show()

filmes["generos"].str.get_dummies('|').sum().sort_values(ascending=False).plot(
    kind='bar',
    title="Filmes por categoria",
    figsize=(8,8))
plt.show()

import seaborn as sns
sns.set_style("whitegrid")

filmes_por_genero = filmes["generos"].str.get_dummies('|').sum().sort_values(ascending=False)
plt.figure(figsize=(16,8))
sns.barplot(x=filmes_por_genero.index,
            y=filmes_por_genero.values,
            palette=sns.color_palette("BuGn_r", n_colors=len(filmes_por_genero)+4))

filmes_com_media.head()

notas_do_filme_1 = avaliacoes.query("filmeId==1")["nota"]
print(notas_do_filme_1.mean())
notas_do_filme_1.plot(kind='hist')

notas_do_filme_1 = avaliacoes.query("filmeId==2")["nota"]
print(notas_do_filme_1.mean())
notas_do_filme_1.plot(kind='hist')

filmes_com_media.sort_values("nota",ascending=False)[2450:2500]

def plot_filme(n):
  notas_do_filme =avaliacoes.query(f"filmeId=={n}")["nota"]
  notas_do_filme.plot(kind='hist')
  return notas_do_filme.describe()



plot_filme(919)

plot_filme(46578)

def plot_filme(n):
  notas_do_filme = avaliacoes.query(f"filmeId=={n}")["nota"]
  notas_do_filme.plot(kind='hist')
  plt.show()
  print('\n')
  notas_do_filme.plot.box()
  plt.show()
  return notas_do_filme.describe()

plot_filme(919)

plot_filme(46578)

sns.boxplot(data = avaliacoes.query("filmeId in [1,2,919,46578,745]"), x="filmeId", y="nota")